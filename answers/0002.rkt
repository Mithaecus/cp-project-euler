#lang racket/base

(require racket/stream)

(require "_solution.rkt")

(answer
    #:description 
    "
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    "

    #:input
    4000000

    #:solution
    (begin
        (let()
            (define (stream-add s1 s2)
                (if (or (stream-empty? s1)
                        (stream-empty? s2))
                    empty-stream
                    (stream-cons (+ (stream-first s1)
                                    (stream-first s2))
                                (stream-add (stream-rest s1)
                                            (stream-rest s2)))))

            (define fibonacci-sequence (stream-cons 0 (stream-cons 1 (stream-add fibonacci-sequence (stream-rest fibonacci-sequence)))))

            (define even-fibonacci-sequence (stream-filter even? fibonacci-sequence))

            (define (solve x (fib-stream even-fibonacci-sequence) (accum 0))
                (define fib-element (stream-first fib-stream))
                (displayln fib-element)
                (if (> fib-element x) 
                    accum
                    (solve x (stream-rest fib-stream) (+ accum fib-element))))
            
            (lambda (x) (solve x)))))
